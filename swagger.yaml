tags:
- name: users
  description: users API

paths:
# region --------------- User --------------- #
# [GET] users
  /user/all:
    get:
      security:
      - Bearer: []
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

# [GET] my users detail
  /user/detail:
    get:
      security:
      - Bearer: []
      tags:
      - my user
      summary: Find My User Profile
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

# [GET] my users detail
  /user/booked-flight:
    get:
      security:
      - Bearer: []
      tags:
      - my user
      summary: Find My Booked Flight
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'
  
# [GET] users/username
  /user/username/{username}:
    get:
      security:
      - Bearer: []
      tags:
      - users
      summary: Find User By Username
      parameters:
      - name: username
        in: path
        description: Username
        required: true
        type: string
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /user/id/{id}:
    get:
      security:
      - Bearer: []
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] update/id
  /change-profile:
    put:
      security:
      - Bearer: []
      tags:
      - my user
      summary: Change Profile Picture.
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: image
          type: file
          description: The file to upload.

# [DELETE] Delete Profile Picture
  /user/delete-profile:
    delete:
      security:
      - Bearer: []
      tags:
      - my user
      summary: Delete Profile Picture
      responses:
        200:
          description: 'Success'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# endregion --------------- User --------------- #

# region --------------- Auth --------------- #
# [POST] Sign In
  /auth/signin:
    post:
      tags:
      - auth
      summary: Sign In User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/signIn'
      responses:
        200:
          description: 'Success'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [POST] Sign Up
  /auth/signup:
    post:
      tags:
      - auth
      summary: Sign Up User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/signUp'
      responses:
        200:
          description: 'Success'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] verify-email/code
  /auth/verify-email/{code}:
    get:
      security:
      - Bearer: []
      tags:
      - auth
      summary: Verify User
      parameters:
      - in: path
        name: code
        description: Verify Email
        required: true
        type: string
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] resend verification code
  /auth/resend-verification:
    get:
      security:
      - Bearer: []
      tags:
      - auth
      summary: Resend Verification Email
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

# [POST] Get Access Token
  /auth/get-access-token:
    post:
      tags:
      - auth
      summary: Get New Access Token
      parameters:
      - name: body
        in: body
        description: refresh token data
        required: true
        schema:
          $ref: '#/definitions/refreshToken'
      responses:
        200:
          description: 'Success'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [POST] Send Forget Password Request
  /auth/forget-password:
    post:
      tags:
      - auth
      summary: Send Email Forget Password
      parameters:
      - name: body
        in: body
        description: refresh token data
        required: true
        schema:
          type: object
          required:
          - email
          properties:
            email:
              type: string
              description: user Email
      responses:
        200:
          description: 'Success'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [POST] Verify Forget Password
  /auth/verify-forget-password/{forgetToken}:
    post:
      tags:
      - auth
      summary: Verify Forget Password
      parameters:
      - name: forgetToken
        in: path
        description: Verify Forget Token
        required: true
        type: string
      - in: body
        name: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/signIn'
      responses:
        200:
          description: 'Success'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# endregion --------------- Auth --------------- #

# region --------------- Airline --------------- #
# [GET] all flight
  /airline/all:
    get:
      security:
      - Bearer: []
      tags:
      - airline
      summary: Find All airline
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        500:
          description: 'Server Error'

# [GET] users/id
  /airline/detail/{id}:
    get:
      security:
      - Bearer: []
      tags:
      - airline
      summary: Find Airline By Id
      parameters:
      - name: id
        in: path
        description: Airline Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        401:
          description: 'Unauthorized'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] Delete Airline
  /airline/delete/{id}:
    delete:
      security:
      - Bearer: []
      tags:
      - airline
      summary: Delete Airline data
      parameters:
      - name: id
        in: path
        description: Airline Id
        required: true
        type: integer
      responses:
        200:
          description: 'Success'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
# endregion

# region --------------- Flight --------------- #
# [GET] All flight



# endregion

# definitions
definitions:

  signIn:
    type: object
    required:
        - email
        - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

  signUp:
    type: object
    required:
        - username
        - email
        - password
        - role
    properties:
      username:
        type: string
        description: user Name
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
      role:
        type: string
        description: user Role
        
  refreshToken:
    type: object
    required:
        - refreshToken
    properties:
      refreshToken:
        type: string
        description: Refresh Token

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: 'Value: Bearer {jwt}'

security:
  - Bearer: []

schemes:
 - https
 - http
